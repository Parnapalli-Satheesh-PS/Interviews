Find the Raising temperature from previous day and print out the days where there is raise. without using self join
   create table weather (id int, temperature int)
   Input: 
   Weather table:
   +----+------------+-------------+
   | id | recordDate | temperature |
   +----+------------+-------------+
   | 1  | 2015-01-01 | 10          |
   | 2  | 2015-01-02 | 25          |
   | 3  | 2015-01-03 | 20          |
   | 4  | 2015-01-04 | 30          |
   +----+------------+-------------+
   Output: 
   +----+
   | id |
   +----+
   | 2  |
   | 4  |
   +----+
   Explanation: 
   In 2015-01-02, the temperature was higher than the previous day (10 -> 25).
   In 2015-01-04, the temperature was higher than the previous day (20 -> 30).

SELECT id FROM (
    SELECT id, temperature, LAG(temperature) OVER (ORDER BY recordDate) AS previous_temperature
    FROM Temperature t) t
WHERE temperature > previous_temperature;




Write python code to print occurrence of consecutive occurrences

Sample Input
1222311
Sample Output
(1, 1) (2, 3) (3, 1) (1, 2)

def find_consecutive_occurrences(s):
    result = []
    current_char = s[0]
    count = 1
    
    for i in range(1, len(s)):
        if s[i] == current_char:
            count += 1
        else:
            result.append((int(current_char), count))
            current_char = s[i]
            count = 1
    
    result.append((int(current_char), count))
    
    for r in result:
        print(r, end=" ")

input_string = "1222311"
find_consecutive_occurrences(input_string)



Write DAG with python operator


from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2023, 9, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

def sample_python_function(**context):
    print("This is a sample Python function executed by Airflow.")

dag = DAG(
    'sample_python_operator_dag',
    default_args=default_args,
    description='A simple DAG using PythonOperator',
    schedule_interval=timedelta(days=1),
)

python_task = PythonOperator(
    task_id='run_sample_python_function',
    python_callable=sample_python_function,
    dag=dag,
)

python_task














